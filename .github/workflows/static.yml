name: Lint
on:
  push:
    branches: [ master, '2.2' ]
  pull_request:
    branches: [ master, '2.2' ]

jobs:
  lint:
    runs-on: ubuntu-18.04
    env:
      PIMCORE_ENVIRONMENT: "test"
      PIMCORE_TEST_DB_DSN: "mysql://root:root@127.0.0.1:3306/coreshop_test"
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: coreshop_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        php: [ 7.3, 7.4 ]

    steps:
    - uses: actions/checkout@v2

    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 7.2
        extensions: intl, gd, simpleXML, dom, exif, fileinfo, iconv, mbstring, mysqli, pdo_mysql, zip, zlib

    - name: Copy parameters.yml
      run: cp app/config/parameters.example.yml app/config/parameters.yml

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Verify MySQL connection
      run: |
        mysql --version
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot -e "SHOW DATABASES"

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Composer install
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Validate YAML
      run: bin/console lint:yaml src --no-debug

    - name: Validate TWIG
      run: bin/console lint:twig src --no-debug

    - name: STAN
      run: |
        cp -f app/config/config_test.yml app/config/config_dev.yml
        bin/console cache:warmup --env=dev
        vendor/bin/phpstan analyse -c phpstan.neon src -l 3
